generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 enum Role {
  user
  admin
  superadmin
}

enum SubscriptionStatus {
  active
  expired
  canceled
  pending_payment
}

enum PaymentMethod {
  card
  paypal
  bank_transfer
  crypto
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum SubscriptionType {
  free
  premium
}

enum VideoQuality {
  P240
  P360
  P480
  P720
  P1080
  P4K
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  passwordHash String   @db.VarChar(255)
  role         Role     @default(user)
  avatarUrl    String?
  createdAt    DateTime @default(now()) 
  @@map("users")

  profiles           Profile[]
  subscriptions      UserSubscription[]
  createdMovies      Movie[]      @relation("MovieCreator")
  favorites          Favorite[]
  reviews            Review[]
  watchHistory       WatchHistory[]
}

model Profile {
  id        String   @id @default(uuid())  @db.Uuid
  userId    String @db.Uuid @unique
  fullName  String   @db.VarChar(100)
  phone     String  @db.VarChar(20)
  country   String  @db.VarChar(50)
  createdAt DateTime @default(now())
    @@map("profiles")

  user User @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id           String  @id @default(uuid())  @db.Uuid
  name         String  @db.VarChar(50)
  price        Decimal
  durationDays Int     
  features     Json
  isActive     Boolean @default(true)
  @@map("subscriptionPlans")
  subscriptions UserSubscription[]
}

model UserSubscription {
  id         String   @id @default(uuid())  @db.Uuid
  userId     String @db.Uuid
  planId     String @db.Uuid
  startDate  DateTime @default(now()) 
  endDate    DateTime
  status     SubscriptionStatus @default(pending_payment)
  autoRenew  Boolean  @default(false) 
  createdAt  DateTime @default(now())
  @@map("userSubscriptions")
  user User @relation(fields: [userId], references: [id])
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]
}

model Payment {
  id                   String   @id @default(uuid())  @db.Uuid
  userSubscriptionId   String  @db.Uuid 
  amount               Decimal
  paymentMethod        PaymentMethod 
  paymentDetails       Json    
  status               PaymentStatus
  externalTransactionId String @db.VarChar(100)
  createdAt            DateTime @default(now()) 
  @@map("payments")
  userSubscription UserSubscription @relation(fields: [userSubscriptionId], references: [id])
}

model Category {
  id          String @id @default(uuid())  @db.Uuid
  name        String @db.VarChar(50)
  slug        String @unique @db.VarChar(50)
  description String

  movieCategories MovieCategory[]
}

model Movie {
  id               String   @id @default(uuid())  @db.Uuid
  title            String   @db.VarChar(100)
  slug             String?  @unique  @db.VarChar(100)
  description      String 
  releaseYear      Int      
  durationMinutes  Int      
  posterUrl        String @db.VarChar(255) 
  rating           Decimal
  subscriptionType SubscriptionType @default(free) 
  viewCount        Int      @default(0) 
  createdBy        String    @db.Uuid
  createdAt        DateTime @default(now()) 
  @@map("movies")
  creator User @relation("MovieCreator", fields: [createdBy], references: [id])
  movieCategories MovieCategory[]
  files MovieFile[]
  favorites Favorite[]
  reviews Review[]
  watchHistory WatchHistory[]             
}

model MovieCategory {
  id         String @id @default(uuid())  @db.Uuid
  movieId    String @db.Uuid
  categoryId String  @db.Uuid
  @@map("movieCategory")
  movie    Movie    @relation(fields: [movieId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model MovieFile {
  id       String @id @default(uuid())  @db.Uuid
  movieId  String  @db.Uuid
  fileUrl  String   @db.VarChar(255) 
  quality  VideoQuality
  language String   @default("uz") @db.VarChar(20)
  @@map("movieFiles")
  movie Movie @relation(fields: [movieId], references: [id])
}

model Favorite {
  id        String   @id @default(uuid())  @db.Uuid
  userId    String  @db.Uuid
  movieId   String   @db.Uuid
  createdAt DateTime @default(now()) 
  @@map("favorites")
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
}

model Review {
  id        String   @id @default(uuid())  @db.Uuid
  userId    String   @db.Uuid
  movieId   String   @db.Uuid
  rating    Int
  comment   String
  createdAt DateTime @default(now()) 
  @@map("reviews")
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
}

model WatchHistory {
  id                String   @id @default(uuid())  @db.Uuid
  userId            String  @db.Uuid
  movieId           String  @db.Uuid
  watchedDuration   Int     
  watchedPercentage Decimal 
  lastWatched       DateTime @default(now()) 
  @@map("watchHistorys")
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
}
